{"ast":null,"code":"var _jsxFileName = \"/Users/teancum/omni_mint/src/PreSalePage/PreSale.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport style from \"./style.module.css\";\nimport { useEffect, useState } from \"react\"; //import Background from '../imgs/goddess.jpeg';\n\nimport Background from '../imgs/logo.jpg';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport { Button } from \"react-bootstrap\";\nimport Web3 from \"web3\";\nimport { tokenABI } from \"../contracts/ABIs\";\nimport { tokenAddress } from \"../contracts/contractAddress\";\nimport mint from \"../imgs/mint.png\";\nimport logo from \"../imgs/logo.jpg\"; //import { ethers } from \"ethers\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PreSale = () => {\n  _s();\n\n  const [omniContract, setOmniContract] = useState(null);\n  const [account, setAccount] = useState(null);\n  var sectionStyle = {\n    width: \"100%\",\n    height: \"400px\",\n    backgroundImage: \"url(\" + Background + \")\"\n  };\n  var price = 0.05;\n  const [numOmnis, setValue] = useState('1');\n\n  const handleSelect = e => {\n    console.log(e);\n    setValue(e);\n  }; //const [preSaleAmount, setPreSaleAmount] = useState(1000);\n\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      const web3 = window.web3;\n      await window.ethereum.enable();\n      const account = await web3.eth.getAccounts();\n      console.log(account);\n      setAccount(account[0]);\n      const contract = new web3.eth.Contract(tokenABI, tokenAddress);\n      setOmniContract(contract);\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n      const web3 = window.web3;\n      const account = await web3.eth.getAccounts();\n      console.log(account);\n      setAccount(account[0]);\n      const contract = new web3.eth.Contract(tokenABI, tokenAddress);\n      setOmniContract(contract);\n    } else {\n      window.alert(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n    }\n  };\n\n  const BuyToken = async numberOfTokens => {\n    const web3 = window.web3;\n    const contract = new web3.eth.Contract(tokenABI, tokenAddress);\n    setOmniContract(contract);\n    console.log(account);\n    var cost = price * numberOfTokens;\n    let tokenTransaction;\n    let tokenId = null; //    let transactionData;\n\n    let tokenIdArray = [];\n    tokenTransaction = await contract.methods.presaleMintItems(numberOfTokens).send({\n      from: account,\n      //      gas: 3000000,\n      value: web3.utils.toWei(cost.toString(), \"ether\")\n    });\n    console.log(tokenABI);\n    tokenId = JSON.parse(JSON.stringify(tokenTransaction))[\"events\"][\"Transfer\"][\"returnValues\"];\n    document.getElementById(\"mint\").classList.add(\"active-bear\");\n    if (tokenId !== null) window.alert(\"Token ID: \" + JSON.stringify(tokenId));else window.alert(\"Token IDS: \" + JSON.stringify(tokenIdArray)); // await updatePreSale();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: 'blue'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PreSale, \"4JRn7RPbJJ7MgQi+0vjb+6ReigM=\");\n\n_c = PreSale;\nexport default PreSale;\n\nvar _c;\n\n$RefreshReg$(_c, \"PreSale\");","map":{"version":3,"sources":["/Users/teancum/omni_mint/src/PreSalePage/PreSale.js"],"names":["React","style","useEffect","useState","Background","DropdownButton","Dropdown","Button","Web3","tokenABI","tokenAddress","mint","logo","PreSale","omniContract","setOmniContract","account","setAccount","sectionStyle","width","height","backgroundImage","price","numOmnis","setValue","handleSelect","e","console","log","loadWeb3","window","ethereum","web3","enable","eth","getAccounts","contract","Contract","currentProvider","alert","BuyToken","numberOfTokens","cost","tokenTransaction","tokenId","tokenIdArray","methods","presaleMintItems","send","from","value","utils","toWei","toString","JSON","parse","stringify","document","getElementById","classList","add","backgroundColor"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport style from \"./style.module.css\";\nimport { useEffect,useState } from \"react\";\n//import Background from '../imgs/goddess.jpeg';\nimport Background from '../imgs/logo.jpg';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown'\n\n\nimport { Button } from \"react-bootstrap\";\nimport Web3 from \"web3\";\n\nimport { tokenABI } from \"../contracts/ABIs\";\nimport { tokenAddress } from \"../contracts/contractAddress\";\n\nimport mint from \"../imgs/mint.png\";\nimport logo from \"../imgs/logo.jpg\"\n\n//import { ethers } from \"ethers\";\n\nconst PreSale = () => {\n  const [omniContract,setOmniContract] = useState(null);\n  const [account, setAccount] = useState(null);\n\n  var sectionStyle = {\n        width: \"100%\",\n        height: \"400px\",\n        backgroundImage: \"url(\" + Background + \")\"\n      };\n\n  var price = 0.05;\n\n  const [numOmnis,setValue]=useState('1');\n\n  const handleSelect=(e)=>{\n    console.log(e);\n    setValue(e)\n    }\n  //const [preSaleAmount, setPreSaleAmount] = useState(1000);\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      const web3 = window.web3;\n      await window.ethereum.enable();\n\n      const account = await web3.eth.getAccounts();\n      console.log(account);\n      setAccount(account[0]);\n\n      const contract = new web3.eth.Contract(tokenABI, tokenAddress);\n      setOmniContract(contract);\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n      const web3 = window.web3;\n\n      const account = await web3.eth.getAccounts();\n      console.log(account);\n      setAccount(account[0]);\n\n      const contract = new web3.eth.Contract(tokenABI, tokenAddress);\n      setOmniContract(contract);\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  };\n\n  const BuyToken = async (numberOfTokens) => {\n    const web3 = window.web3;\n    const contract = new web3.eth.Contract(tokenABI, tokenAddress);\n    setOmniContract(contract);\n\n    console.log(account);\n\n    var cost = price * numberOfTokens;\n    \n    let tokenTransaction;\n    let tokenId = null;\n//    let transactionData;\n    let tokenIdArray = [];\n\n    tokenTransaction = await contract.methods.presaleMintItems(numberOfTokens).send({\n      from: account,\n//      gas: 3000000,\n      value: web3.utils.toWei(cost.toString(), \"ether\"),\n    });\n    console.log(tokenABI);\n\n    tokenId = JSON.parse(JSON.stringify(tokenTransaction))[\"events\"][\n      \"Transfer\"\n    ][\"returnValues\"];\n\n    document.getElementById(\"mint\").classList.add(\"active-bear\");\n\n\n    if (tokenId !== null) window.alert(\"Token ID: \" + JSON.stringify(tokenId));\n    else window.alert(\"Token IDS: \" + JSON.stringify(tokenIdArray));\n    // await updatePreSale();\n  };\n\n  return (\n    <div\n      style={{\n        backgroundColor: 'blue',\n\n      }}\n    />\n  );\n};\n\nexport default PreSale;\n"]},"metadata":{},"sourceType":"module"}